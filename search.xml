<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nano使用串口播报</title>
      <link href="/2023/01/27/nano%E4%BD%BF%E7%94%A8%E4%B8%B2%E5%8F%A3%E6%92%AD%E6%8A%A5/"/>
      <url>/2023/01/27/nano%E4%BD%BF%E7%94%A8%E4%B8%B2%E5%8F%A3%E6%92%AD%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>Nano端：</p><h3 id="要使用Nano上的串口，用Python控制，先安装Python3版本的py-serial库"><a href="#要使用Nano上的串口，用Python控制，先安装Python3版本的py-serial库" class="headerlink" title="要使用Nano上的串口，用Python控制，先安装Python3版本的py-serial库"></a>要使用Nano上的串口，用Python控制，先安装Python3版本的py-serial库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-serial</span><br></pre></td></tr></table></figure><h3 id="与PC通信的例程可在GitHub上下载（或者直接打开网址手动下载）"><a href="#与PC通信的例程可在GitHub上下载（或者直接打开网址手动下载）" class="headerlink" title="与PC通信的例程可在GitHub上下载（或者直接打开网址手动下载）"></a>与PC通信的例程可在GitHub上下载（或者直接打开网址手动下载）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/JetsonHacksNano/UARTDemo</span><br></pre></td></tr></table></figure><h3 id="打开串口权限（每次关机后Nano都关闭串口，所以每次使用时都要打开一次）"><a href="#打开串口权限（每次关机后Nano都关闭串口，所以每次使用时都要打开一次）" class="headerlink" title="打开串口权限（每次关机后Nano都关闭串口，所以每次使用时都要打开一次）"></a>打开串口权限（每次关机后Nano都关闭串口，所以每次使用时都要打开一次）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 /dev/ttyTHS1</span><br></pre></td></tr></table></figure><h3 id="进入下载好的UARTDemo文件夹，终端运行程序"><a href="#进入下载好的UARTDemo文件夹，终端运行程序" class="headerlink" title="进入下载好的UARTDemo文件夹，终端运行程序"></a>进入下载好的UARTDemo文件夹，终端运行程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> UARTDemo</span><br><span class="line">sudo python3 uart_example.py</span><br></pre></td></tr></table></figure><h2 id="硬件接线-对应"><a href="#硬件接线-对应" class="headerlink" title="硬件接线(对应)"></a>硬件接线(对应)</h2><table><thead><tr><th>Nano</th><th>播报模块</th></tr></thead><tbody><tr><td>引脚8(TXD)</td><td>PB6(RXD)</td></tr><tr><td>引脚10(RXD)</td><td>PB5(TXD)</td></tr><tr><td>引脚6(GND)</td><td>GND</td></tr><tr><td>引脚2(5V)</td><td>5V</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VOC与YOLO数据格式的相互转换</title>
      <link href="/2023/01/27/dateSet/"/>
      <url>/2023/01/27/dateSet/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>Python 3.8.10</p><p>标注工具<a href="https://github.com/heartexlabs/labelImg">labelImg</a></p></blockquote><h2 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO:"></a>YOLO:</h2><p>yolo数据集标注格式主要是 U版本yolov5项目需要用到。</p><p>标签使用txt文本进行保存。</p><p>yolo标注格式如下所示：</p><p><code>&lt;object-class&gt; &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt;</code></p><p>例如：</p><p><code>0 0.412500 0.318981 0.358333 0.636111</code></p><ul><li><object-class>：对象的标签索引</li><li>x，y：目标的中心坐标，相对于图片的H和W做归一化。即x/W，y/H。</li><li>width，height：目标（bbox）的宽和高，相对于图像的H和W做归一化。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="built_in">test</span>/images <span class="built_in">test</span>/labels train/images train/labels valid/images valid/labels</span><br></pre></td></tr></table></figure><h2 id="VOC"><a href="#VOC" class="headerlink" title="VOC"></a>VOC</h2><p>VOC数据集由五个部分构成：JPEGImages，Annotations，ImageSets，SegmentationClass以及SegmentationObject.</p><p>JPEGImages：存放的是训练与测试的所有图片。<br>Annotations：里面存放的是每张图片打完标签所对应的XML文件。<br>ImageSets：ImageSets文件夹下本次讨论的只有Main文件夹，此文件夹中存放的主要又有四个文本文件test.txt、train.txt、trainval.txt、val.txt, 其中分别存放的是测试集图片的文件名、训练集图片的文件名、训练验证集图片的文件名、验证集图片的文件名。<br>SegmentationClass与SegmentationObject：存放的都是图片，且都是图像分割结果图，对目标检测任务来说没有用。class segmentation 标注出每一个像素的类别<br>object segmentation 标注出每一个像素属于哪一个物体。<br>voc数据集的标签主要以xml文件形式进行存放。</p><p>xml文件的标注格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;annotation&gt;</span><br><span class="line">  &lt;folder&gt;<span class="number">17</span>&lt;/folder&gt; <span class="comment"># 图片所处文件夹</span></span><br><span class="line">  &lt;filename&gt;<span class="number">77258.</span>bmp&lt;/filename&gt; <span class="comment"># 图片名</span></span><br><span class="line">  &lt;path&gt;~/frcnn-image/<span class="number">61</span>/ADAS/image/frcnn-image/<span class="number">17</span>/<span class="number">77258.</span>bmp&lt;/path&gt;</span><br><span class="line">  &lt;source&gt;  <span class="comment">#图片来源相关信息</span></span><br><span class="line">    &lt;database&gt;Unknown&lt;/database&gt;  </span><br><span class="line">  &lt;/source&gt;</span><br><span class="line">  &lt;size&gt; <span class="comment">#图片尺寸</span></span><br><span class="line">    &lt;width&gt;<span class="number">640</span>&lt;/width&gt;</span><br><span class="line">    &lt;height&gt;<span class="number">480</span>&lt;/height&gt;</span><br><span class="line">    &lt;depth&gt;<span class="number">3</span>&lt;/depth&gt;</span><br><span class="line">  &lt;/size&gt;</span><br><span class="line">  &lt;segmented&gt;<span class="number">0</span>&lt;/segmented&gt;  <span class="comment">#是否有分割label</span></span><br><span class="line">  &lt;<span class="built_in">object</span>&gt; 包含的物体</span><br><span class="line">    &lt;name&gt;car&lt;/name&gt;  <span class="comment">#物体类别</span></span><br><span class="line">    &lt;pose&gt;Unspecified&lt;/pose&gt;  <span class="comment">#物体的姿态</span></span><br><span class="line">    &lt;truncated&gt;<span class="number">0</span>&lt;/truncated&gt;  <span class="comment">#物体是否被部分遮挡（&gt;15%）</span></span><br><span class="line">    &lt;difficult&gt;<span class="number">0</span>&lt;/difficult&gt;  <span class="comment">#是否为难以辨识的物体， 主要指要结体背景才能判断出类别的物体。虽有标注， 但一般忽略这类物体</span></span><br><span class="line">    &lt;bndbox&gt;  <span class="comment">#物体的bound box</span></span><br><span class="line">      &lt;xmin&gt;<span class="number">2</span>&lt;/xmin&gt;     <span class="comment">#左</span></span><br><span class="line">      &lt;ymin&gt;<span class="number">156</span>&lt;/ymin&gt;   <span class="comment">#上</span></span><br><span class="line">      &lt;xmax&gt;<span class="number">111</span>&lt;/xmax&gt;   <span class="comment">#右</span></span><br><span class="line">      &lt;ymax&gt;<span class="number">259</span>&lt;/ymax&gt;   <span class="comment">#下</span></span><br><span class="line">    &lt;/bndbox&gt;</span><br><span class="line">  &lt;/<span class="built_in">object</span>&gt;</span><br><span class="line">&lt;/annotation&gt;</span><br></pre></td></tr></table></figure><h3 id="自制VOC数据集"><a href="#自制VOC数据集" class="headerlink" title="自制VOC数据集"></a>自制VOC数据集</h3><p>首先，按照VOC2007的数据集格式要求，分别创建文件夹VOCdevkit、VOC2007、Annotations、ImageSets、Main和JPEGImages，它们的层级结构如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─VOCdevkit</span><br><span class="line">    └─VOC2007</span><br><span class="line">        ├─Annotations</span><br><span class="line">        ├─ImageSets</span><br><span class="line">        │  └─Main</span><br><span class="line">        └─JPEGImages</span><br></pre></td></tr></table></figure><p>可使用命令快速创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p VOCdevkit/VOC2007/&#123;Annotations,ImageSets/Main,JPEGImages&#125;</span><br></pre></td></tr></table></figure><p>其中，Annotations用来存放xml标注文件，JPEGImages用来存放图片文件，而ImageSets/Main存放几个txt文本文件，文件的内容是训练集、验证集和测试集中图片的名称(去掉扩展名)，这几个文本文件是需要我们自己生成的，后面会讲到。</p><p>接下来，将images文件夹中的图片文件拷贝到JPEGImages文件夹中，将images文件中的xml标注文件拷贝到Annotations文件夹中<br>接下来新建一个脚本，把它放在VOCdevkit/VOC2007文件夹下，命名为test.py    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">─VOCdevkit</span><br><span class="line">    └─VOC2007</span><br><span class="line">        │  test.py</span><br><span class="line">        │</span><br><span class="line">        ├─Annotations</span><br><span class="line">        ├─ImageSets</span><br><span class="line">        │  └─Main</span><br><span class="line">        └─JPEGImages</span><br></pre></td></tr></table></figure><p>脚本的内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集和验证集的比例分配</span></span><br><span class="line">trainval_percent = <span class="number">0.1</span></span><br><span class="line">train_percent = <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标注文件的路径</span></span><br><span class="line">xmlfilepath = <span class="string">&#x27;Annotations&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成的txt文件存放路径</span></span><br><span class="line">txtsavepath = <span class="string">&#x27;ImageSets\Main&#x27;</span></span><br><span class="line">total_xml = os.listdir(xmlfilepath)</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">len</span>(total_xml)</span><br><span class="line"><span class="built_in">list</span> = <span class="built_in">range</span>(num)</span><br><span class="line">tv = <span class="built_in">int</span>(num * trainval_percent)</span><br><span class="line">tr = <span class="built_in">int</span>(tv * train_percent)</span><br><span class="line">trainval = random.sample(<span class="built_in">list</span>, tv)</span><br><span class="line">train = random.sample(trainval, tr)</span><br><span class="line"></span><br><span class="line">ftrainval = <span class="built_in">open</span>(<span class="string">&#x27;ImageSets/Main/trainval.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">ftest = <span class="built_in">open</span>(<span class="string">&#x27;ImageSets/Main/test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">ftrain = <span class="built_in">open</span>(<span class="string">&#x27;ImageSets/Main/train.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">fval = <span class="built_in">open</span>(<span class="string">&#x27;ImageSets/Main/val.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    name = total_xml[i][:-<span class="number">4</span>] + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> trainval:</span><br><span class="line">        ftrainval.write(name)</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> train:</span><br><span class="line">            ftest.write(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fval.write(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ftrain.write(name)</span><br><span class="line"></span><br><span class="line">ftrainval.close()</span><br><span class="line">ftrain.close()</span><br><span class="line">fval.close()</span><br><span class="line">ftest.close()</span><br></pre></td></tr></table></figure><p>然后，进入到目录VOCdevkit/VOC2007，执行这个脚本，结束后，在ImageSets/Main下生成了4个txt文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├─ImageSets</span><br><span class="line">│  └─Main</span><br><span class="line">│          test.txt</span><br><span class="line">│          train.txt</span><br><span class="line">│          trainval.txt</span><br><span class="line">│          val.txt</span><br><span class="line">│</span><br><span class="line">└─JPEGImages</span><br></pre></td></tr></table></figure><p>这4个文件的格式都是一样的，文件的内容是对应图片名称去掉扩展名(与xml标注文件去掉.xml一致)的结果</p><p>然后新建脚本voc_labels.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir, getcwd</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始脚本中包含了VOC2012，这里，我们把它删除</span></span><br><span class="line"><span class="comment"># sets=[(&#x27;2012&#x27;, &#x27;train&#x27;), (&#x27;2012&#x27;, &#x27;val&#x27;), (&#x27;2007&#x27;, &#x27;train&#x27;), (&#x27;2007&#x27;, &#x27;val&#x27;), (&#x27;2007&#x27;, &#x27;test&#x27;)]</span></span><br><span class="line">sets=[(<span class="string">&#x27;2007&#x27;</span>, <span class="string">&#x27;train&#x27;</span>), (<span class="string">&#x27;2007&#x27;</span>, <span class="string">&#x27;val&#x27;</span>), (<span class="string">&#x27;2007&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># classes也需要根据自己的实际情况修改</span></span><br><span class="line"><span class="comment"># classes = [&quot;aeroplane&quot;, &quot;bicycle&quot;, &quot;bird&quot;, &quot;boat&quot;, &quot;bottle&quot;, &quot;bus&quot;, &quot;car&quot;, &quot;cat&quot;, &quot;chair&quot;, &quot;cow&quot;, &quot;diningtable&quot;, &quot;dog&quot;, &quot;horse&quot;, &quot;motorbike&quot;, &quot;person&quot;, &quot;pottedplant&quot;, &quot;sheep&quot;, &quot;sofa&quot;, &quot;train&quot;, &quot;tvmonitor&quot;]</span></span><br><span class="line">classes = [<span class="string">&quot;hat&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">size, box</span>):</span><br><span class="line">    dw = <span class="number">1.</span>/size[<span class="number">0</span>]</span><br><span class="line">    dh = <span class="number">1.</span>/size[<span class="number">1</span>]</span><br><span class="line">    x = (box[<span class="number">0</span>] + box[<span class="number">1</span>])/<span class="number">2.0</span></span><br><span class="line">    y = (box[<span class="number">2</span>] + box[<span class="number">3</span>])/<span class="number">2.0</span></span><br><span class="line">    w = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    x = x*dw</span><br><span class="line">    w = w*dw</span><br><span class="line">    y = y*dh</span><br><span class="line">    h = h*dh</span><br><span class="line">    <span class="keyword">return</span> (x,y,w,h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_annotation</span>(<span class="params">year, image_id</span>):</span><br><span class="line">    in_file = <span class="built_in">open</span>(<span class="string">&#x27;VOCdevkit/VOC%s/Annotations/%s.xml&#x27;</span>%(year, image_id))</span><br><span class="line">    out_file = <span class="built_in">open</span>(<span class="string">&#x27;VOCdevkit/VOC%s/labels/%s.txt&#x27;</span>%(year, image_id), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    tree=ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    w = <span class="built_in">int</span>(size.find(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">    h = <span class="built_in">int</span>(size.find(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">        difficult = obj.find(<span class="string">&#x27;difficult&#x27;</span>).text</span><br><span class="line">        cls = obj.find(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> classes <span class="keyword">or</span> <span class="built_in">int</span>(difficult) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        b = (<span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmin&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmax&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymin&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymax&#x27;</span>).text))</span><br><span class="line">        bb = convert((w,h), b)</span><br><span class="line">        out_file.write(<span class="built_in">str</span>(cls_id) + <span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span>.join([<span class="built_in">str</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> bb]) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd = getcwd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> year, image_set <span class="keyword">in</span> sets:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;VOCdevkit/VOC%s/labels/&#x27;</span>%(year)):</span><br><span class="line">        os.makedirs(<span class="string">&#x27;VOCdevkit/VOC%s/labels/&#x27;</span>%(year))</span><br><span class="line">    image_ids = <span class="built_in">open</span>(<span class="string">&#x27;VOCdevkit/VOC%s/ImageSets/Main/%s.txt&#x27;</span>%(year, image_set)).read().strip().split()</span><br><span class="line">    list_file = <span class="built_in">open</span>(<span class="string">&#x27;%s_%s.txt&#x27;</span>%(year, image_set), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> image_id <span class="keyword">in</span> image_ids:</span><br><span class="line">        list_file.write(<span class="string">&#x27;%s/VOCdevkit/VOC%s/JPEGImages/%s.jpg\n&#x27;</span>%(wd, year, image_id))</span><br><span class="line">        convert_annotation(year, image_id)</span><br><span class="line">    list_file.close()</span><br></pre></td></tr></table></figure><p>执行上述脚本后，在VOCdevkit同级目录就会生成2007_train.txt、2007_val.txt、2007_test.txt。<br>自制的VOC2007数据集就已经准备好了。对应到darknet中的配置文件cfg/voc.data就可以这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">classes= 1</span><br><span class="line">train  = 2007_train.txt</span><br><span class="line">valid  = 2007_val.txt</span><br><span class="line">names = data/voc.names</span><br><span class="line">backup = backup/</span><br></pre></td></tr></table></figure><h2 id="VOC-To-YOLO"><a href="#VOC-To-YOLO" class="headerlink" title="VOC_To_YOLO"></a>VOC_To_YOLO</h2><blockquote><p>labelImg可以导出YOLO的数据格式。但是如果你拿到的是一份标注格式为xml的数据，那就需要进行转换了。</p></blockquote><p>将所有图片存放在images文件夹，xml标注文件放在Annotations文件夹，然后创建一个文件夹labels</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├─Annotations</span><br><span class="line">├─images</span><br><span class="line">├─labels</span><br><span class="line">└─voc_to_yolo.py</span><br></pre></td></tr></table></figure><p>可使用命令快速创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> Annotations images labels</span><br></pre></td></tr></table></figure><p>新建脚本voc_to_yolo.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir, getcwd</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据自己情况修改</span></span><br><span class="line">classes = [<span class="string">&quot;hat&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">size, box</span>):</span><br><span class="line">    dw = <span class="number">1.</span> / size[<span class="number">0</span>]</span><br><span class="line">    dh = <span class="number">1.</span> / size[<span class="number">1</span>]</span><br><span class="line">    x = (box[<span class="number">0</span>] + box[<span class="number">1</span>]) / <span class="number">2.0</span></span><br><span class="line">    y = (box[<span class="number">2</span>] + box[<span class="number">3</span>]) / <span class="number">2.0</span></span><br><span class="line">    w = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    x = x * dw</span><br><span class="line">    w = w * dw</span><br><span class="line">    y = y * dh</span><br><span class="line">    h = h * dh</span><br><span class="line">    <span class="keyword">return</span> (x, y, w, h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_annotation</span>(<span class="params">image_id</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;Annotations/%s.xml&#x27;</span> % (image_id)):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    in_file = <span class="built_in">open</span>(<span class="string">&#x27;annotations/%s.xml&#x27;</span> % (image_id))</span><br><span class="line"></span><br><span class="line">    out_file = <span class="built_in">open</span>(<span class="string">&#x27;labels/%s.txt&#x27;</span> % (image_id), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    tree = ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    w = <span class="built_in">int</span>(size.find(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">    h = <span class="built_in">int</span>(size.find(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">        cls = obj.find(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> classes:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        b = (<span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmin&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmax&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymin&#x27;</span>).text),</span><br><span class="line">             <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymax&#x27;</span>).text))</span><br><span class="line">        bb = convert((w, h), b)</span><br><span class="line">        out_file.write(<span class="built_in">str</span>(cls_id) + <span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span>.join([<span class="built_in">str</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> bb]) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> os.listdir(<span class="string">&#x27;images&#x27;</span>):</span><br><span class="line">    <span class="comment"># 这里需要根据你的图片情况进行对应修改。比如图片名称是123.456.jpg，这里就会出错了。一般来讲，如果图片格式固定，如全都是jpg，那就image_id=image[:-4]处理就好了。总之，情况比较多，自己看着办，哈哈！</span></span><br><span class="line">    image_id = image.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    convert_annotation(image_id)</span><br></pre></td></tr></table></figure><p>执行上述脚本后，labels文件夹就会生成txt格式的标注文件了</p><p>yolov5训练时使用的数据集结构是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├─test</span><br><span class="line">│  ├─images</span><br><span class="line">│  └─labels</span><br><span class="line">├─train</span><br><span class="line">│  ├─images</span><br><span class="line">│  └─labels</span><br><span class="line">└─valid</span><br><span class="line">    ├─images</span><br><span class="line">    └─labels</span><br></pre></td></tr></table></figure><p>可使用命令快速创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p &#123;<span class="built_in">test</span>,train,valid&#125;/&#123;images,labels&#125;</span><br></pre></td></tr></table></figure><p>目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├─Annotations</span><br><span class="line">├─images</span><br><span class="line">├─labels</span><br><span class="line">├─test</span><br><span class="line">│  ├─images</span><br><span class="line">│  └─labels</span><br><span class="line">├─train</span><br><span class="line">│  ├─images</span><br><span class="line">│  └─labels</span><br><span class="line">└─valid</span><br><span class="line">    ├─images</span><br><span class="line">    └─labels</span><br><span class="line">└─voc_to_yolo.py</span><br><span class="line">└─distribution.py</span><br></pre></td></tr></table></figure><p>我们还需要将图片文件和对应的txt标签文件再进行一次划分，首先创建外层的train、valid、test文件夹，然后在每个文件夹底下都分别创建images和labels文件夹<br>新建distribution.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集、验证集和测试集的比例分配</span></span><br><span class="line">test_percent = <span class="number">0.1</span></span><br><span class="line">valid_percent = <span class="number">0.2</span></span><br><span class="line">train_percent = <span class="number">0.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标注文件的路径</span></span><br><span class="line">image_path = <span class="string">&#x27;images&#x27;</span></span><br><span class="line">label_path = <span class="string">&#x27;labels&#x27;</span></span><br><span class="line"></span><br><span class="line">images_files_list = os.listdir(image_path)</span><br><span class="line">labels_files_list = os.listdir(label_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;images files: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;labels files: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list))</span><br><span class="line">total_num = <span class="built_in">len</span>(images_files_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;total_num: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(total_num))</span><br><span class="line"></span><br><span class="line">test_num = <span class="built_in">int</span>(total_num * test_percent)</span><br><span class="line">valid_num = <span class="built_in">int</span>(total_num * valid_percent)</span><br><span class="line">train_num = <span class="built_in">int</span>(total_num * train_percent)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应文件的索引</span></span><br><span class="line">test_image_index = random.sample(<span class="built_in">range</span>(total_num), test_num)</span><br><span class="line">valid_image_index = random.sample(<span class="built_in">range</span>(total_num), valid_num) </span><br><span class="line">train_image_index = random.sample(<span class="built_in">range</span>(total_num), train_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(total_num):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;src image: &#123;&#125;, i=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i], i))</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> test_image_index:</span><br><span class="line">        <span class="comment"># 将图片和标签文件拷贝到对应文件夹下</span></span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]), <span class="string">&#x27;test/images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]))</span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]), <span class="string">&#x27;test/labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]))</span><br><span class="line">    <span class="keyword">elif</span> i <span class="keyword">in</span> valid_image_index:</span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]), <span class="string">&#x27;valid/images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]))</span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]), <span class="string">&#x27;valid/labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]), <span class="string">&#x27;train/images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]))</span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]), <span class="string">&#x27;train/labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]))</span><br></pre></td></tr></table></figure><p>执行代码后，可以看到类似文件层级结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">─test</span><br><span class="line">│  ├─images</span><br><span class="line">│  │      1234565343231.jpg</span><br><span class="line">│  │      1559035146628.jpg</span><br><span class="line">│  │      2019032210151.jpg</span><br><span class="line">│  │</span><br><span class="line">│  └─labels</span><br><span class="line">│          1234565343231.txt</span><br><span class="line">│          1559035146628.txt</span><br><span class="line">│          2019032210151.txt</span><br><span class="line">│</span><br><span class="line">├─train</span><br><span class="line">│  ├─images</span><br><span class="line">│  │      1213211.jpg</span><br><span class="line">│  │      12i4u33112.jpg</span><br><span class="line">│  │      1559092537114.jpg</span><br><span class="line">│  │</span><br><span class="line">│  └─labels</span><br><span class="line">│          1213211.txt</span><br><span class="line">│          12i4u33112.txt</span><br><span class="line">│          1559092537114.txt</span><br><span class="line">│</span><br><span class="line">└─valid</span><br><span class="line">    ├─images</span><br><span class="line">    │      120131247621.jpg</span><br><span class="line">    │      124iuy311.jpg</span><br><span class="line">    │      1559093141383.jpg</span><br><span class="line">    │</span><br><span class="line">    └─labels</span><br><span class="line">            120131247621.txt</span><br><span class="line">            124iuy311.txt</span><br><span class="line">            1559093141383.txt</span><br></pre></td></tr></table></figure><h2 id="YOLO-To-VOC"><a href="#YOLO-To-VOC" class="headerlink" title="YOLO_To_VOC"></a>YOLO_To_VOC</h2><p>拿到了txt的标注，但是需要使用VOC，也需要进行转换。看下面这个脚本，注释写在代码中</p><p>新建yolo_to_voc.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片文件夹，后面的/不能省</span></span><br><span class="line">img_path = <span class="string">&#x27;images/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># txt文件夹，后面的/不能省</span></span><br><span class="line">labels_path = <span class="string">&#x27;labels/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># xml存放的文件夹，后面的/不能省</span></span><br><span class="line">annotations_path = <span class="string">&#x27;Annotations/&#x27;</span></span><br><span class="line"></span><br><span class="line">labels = os.listdir(labels_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别</span></span><br><span class="line">classes = [<span class="string">&quot;hat&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片的高度、宽度、深度</span></span><br><span class="line">sh = sw = sd = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_xml</span>(<span class="params">imgname, sw, sh, sd, filepath, labeldicts</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    imgname: 没有扩展名的图片名称</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建Annotation根节点</span></span><br><span class="line">    root = ET.Element(<span class="string">&#x27;Annotation&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建filename子节点，无扩展名                 </span></span><br><span class="line">    ET.SubElement(root, <span class="string">&#x27;filename&#x27;</span>).text = <span class="built_in">str</span>(imgname)        </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建size子节点 </span></span><br><span class="line">    sizes = ET.SubElement(root,<span class="string">&#x27;size&#x27;</span>)                                      </span><br><span class="line">    ET.SubElement(sizes, <span class="string">&#x27;width&#x27;</span>).text = <span class="built_in">str</span>(sw)</span><br><span class="line">    ET.SubElement(sizes, <span class="string">&#x27;height&#x27;</span>).text = <span class="built_in">str</span>(sh)</span><br><span class="line">    ET.SubElement(sizes, <span class="string">&#x27;depth&#x27;</span>).text = <span class="built_in">str</span>(sd) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> labeldict <span class="keyword">in</span> labeldicts:</span><br><span class="line">        objects = ET.SubElement(root, <span class="string">&#x27;object&#x27;</span>)                 </span><br><span class="line">        ET.SubElement(objects, <span class="string">&#x27;name&#x27;</span>).text = labeldict[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        ET.SubElement(objects, <span class="string">&#x27;pose&#x27;</span>).text = <span class="string">&#x27;Unspecified&#x27;</span></span><br><span class="line">        ET.SubElement(objects, <span class="string">&#x27;truncated&#x27;</span>).text = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        ET.SubElement(objects, <span class="string">&#x27;difficult&#x27;</span>).text = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        bndbox = ET.SubElement(objects,<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        ET.SubElement(bndbox, <span class="string">&#x27;xmin&#x27;</span>).text = <span class="built_in">str</span>(<span class="built_in">int</span>(labeldict[<span class="string">&#x27;xmin&#x27;</span>]))</span><br><span class="line">        ET.SubElement(bndbox, <span class="string">&#x27;ymin&#x27;</span>).text = <span class="built_in">str</span>(<span class="built_in">int</span>(labeldict[<span class="string">&#x27;ymin&#x27;</span>]))</span><br><span class="line">        ET.SubElement(bndbox, <span class="string">&#x27;xmax&#x27;</span>).text = <span class="built_in">str</span>(<span class="built_in">int</span>(labeldict[<span class="string">&#x27;xmax&#x27;</span>]))</span><br><span class="line">        ET.SubElement(bndbox, <span class="string">&#x27;ymax&#x27;</span>).text = <span class="built_in">str</span>(<span class="built_in">int</span>(labeldict[<span class="string">&#x27;ymax&#x27;</span>]))</span><br><span class="line">    tree = ET.ElementTree(root)</span><br><span class="line">    tree.write(filepath, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> labels:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(labels_path + label, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        img_id = os.path.splitext(label)[<span class="number">0</span>]</span><br><span class="line">        contents = f.readlines()</span><br><span class="line">        labeldicts = []</span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> contents:</span><br><span class="line">            <span class="comment"># 这里要看你的图片格式了，我这里是jpg，注意修改</span></span><br><span class="line">            img = np.array(Image.<span class="built_in">open</span>(img_path + label.strip(<span class="string">&#x27;.txt&#x27;</span>) + <span class="string">&#x27;.jpg&#x27;</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 图片的高度和宽度</span></span><br><span class="line">            sh, sw, sd = img.shape[<span class="number">0</span>], img.shape[<span class="number">1</span>], img.shape[<span class="number">2</span>]</span><br><span class="line">            content = content.strip(<span class="string">&#x27;\n&#x27;</span>).split()</span><br><span class="line">            x = <span class="built_in">float</span>(content[<span class="number">1</span>])*sw</span><br><span class="line">            y = <span class="built_in">float</span>(content[<span class="number">2</span>])*sh</span><br><span class="line">            w = <span class="built_in">float</span>(content[<span class="number">3</span>])*sw</span><br><span class="line">            h = <span class="built_in">float</span>(content[<span class="number">4</span>])*sh</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 坐标的转换，x_center y_center width height -&gt; xmin ymin xmax ymax</span></span><br><span class="line">            new_dict = &#123;<span class="string">&#x27;name&#x27;</span>: classes[<span class="built_in">int</span>(content[<span class="number">0</span>])],</span><br><span class="line">                        <span class="string">&#x27;difficult&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;xmin&#x27;</span>: x+<span class="number">1</span>-w/<span class="number">2</span>,                     </span><br><span class="line">                        <span class="string">&#x27;ymin&#x27;</span>: y+<span class="number">1</span>-h/<span class="number">2</span>,</span><br><span class="line">                        <span class="string">&#x27;xmax&#x27;</span>: x+<span class="number">1</span>+w/<span class="number">2</span>,</span><br><span class="line">                        <span class="string">&#x27;ymax&#x27;</span>: y+<span class="number">1</span>+h/<span class="number">2</span></span><br><span class="line">                        &#125;</span><br><span class="line">            labeldicts.append(new_dict)</span><br><span class="line">        write_xml(img_id, sw, sh, sd, annotations_path + label.strip(<span class="string">&#x27;.txt&#x27;</span>) + <span class="string">&#x27;.xml&#x27;</span>, labeldicts)</span><br></pre></td></tr></table></figure><!-- ![](https://user-images.githubusercontent.com/48054808/157835276-9aab9d1c-1c46-446b-bdd4-5ab75c5cfa48.png) 引用 --><!-- <img src="https://user-images.githubusercontent.com/48054808/157835276-9aab9d1c-1c46-446b-bdd4-5ab75c5cfa48.png" width="20"/> 引用 --><p>引用</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/383660741">https://zhuanlan.zhihu.com/p/383660741</a></p><p><a href="https://zhuanlan.zhihu.com/p/461488682">https://zhuanlan.zhihu.com/p/461488682</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>npm换源</title>
      <link href="/2023/01/27/npm%E6%8D%A2%E6%BA%90/"/>
      <url>/2023/01/27/npm%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="查看源"><a href="#查看源" class="headerlink" title="查看源"></a>查看源</h2><h3 id="查看依赖包源地址"><a href="#查看依赖包源地址" class="headerlink" title="查看依赖包源地址"></a>查看依赖包源地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><blockquote><p>默认是指向官方源： <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></p></blockquote><h2 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h2><h3 id="淘宝源"><a href="#淘宝源" class="headerlink" title="淘宝源"></a>淘宝源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><blockquote><p>配置信息文件在 ~/.npmrc</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/27/hello-world/"/>
      <url>/2023/01/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2023/01/24/hello/"/>
      <url>/2023/01/24/hello/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
