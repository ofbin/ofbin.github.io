<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaEE杂项</title>
      <link href="/2023/02/02/javaEE/"/>
      <url>/2023/02/02/javaEE/</url>
      
        <content type="html"><![CDATA[<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>参数个数不同 类型向他 特殊语法：可变参数<br>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参数类型... 参数名称</span><br></pre></td></tr></table></figure><blockquote><p>如果包含其他参数时，可变参数在最后声明</p></blockquote><h2 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h2><ul><li>原空间(方法区)<br>  类的信息<br>  静态属性</li><li>栈内存<br>方法（栈帧），变量</li><li>堆内存<br>  创建的对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu设置开机自启服务</title>
      <link href="/2023/01/29/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E6%96%87%E4%BB%B6/"/>
      <url>/2023/01/29/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/rc.local</span><br></pre></td></tr></table></figure><p>服务：<br>re.local<br>sudo chmod 777 /dev/ttyUSB*</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VOC与YOLO数据格式的相互转换</title>
      <link href="/2023/01/27/dateSet/"/>
      <url>/2023/01/27/dateSet/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>Python 3.8.10</p><p>标注工具<a href="https://github.com/heartexlabs/labelImg">labelImg</a></p></blockquote><h2 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO:"></a>YOLO:</h2><p>yolo数据集标注格式主要是 U版本yolov5项目需要用到。</p><p>标签使用txt文本进行保存。</p><p>yolo标注格式如下所示：</p><p><code>&lt;object-class&gt; &lt;x&gt; &lt;y&gt; &lt;width&gt; &lt;height&gt;</code></p><p>例如：</p><p><code>0 0.412500 0.318981 0.358333 0.636111</code></p><ul><li><object-class>：对象的标签索引</li><li>x，y：目标的中心坐标，相对于图片的H和W做归一化。即x/W，y/H。</li><li>width，height：目标（bbox）的宽和高，相对于图像的H和W做归一化。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="built_in">test</span>/images <span class="built_in">test</span>/labels train/images train/labels valid/images valid/labels</span><br></pre></td></tr></table></figure><h2 id="VOC"><a href="#VOC" class="headerlink" title="VOC"></a>VOC</h2><p>VOC数据集由五个部分构成：JPEGImages，Annotations，ImageSets，SegmentationClass以及SegmentationObject.</p><p>JPEGImages：存放的是训练与测试的所有图片。<br>Annotations：里面存放的是每张图片打完标签所对应的XML文件。<br>ImageSets：ImageSets文件夹下本次讨论的只有Main文件夹，此文件夹中存放的主要又有四个文本文件test.txt、train.txt、trainval.txt、val.txt, 其中分别存放的是测试集图片的文件名、训练集图片的文件名、训练验证集图片的文件名、验证集图片的文件名。<br>SegmentationClass与SegmentationObject：存放的都是图片，且都是图像分割结果图，对目标检测任务来说没有用。class segmentation 标注出每一个像素的类别<br>object segmentation 标注出每一个像素属于哪一个物体。<br>voc数据集的标签主要以xml文件形式进行存放。</p><p>xml文件的标注格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;annotation&gt;</span><br><span class="line">  &lt;folder&gt;<span class="number">17</span>&lt;/folder&gt; <span class="comment"># 图片所处文件夹</span></span><br><span class="line">  &lt;filename&gt;<span class="number">77258.</span>bmp&lt;/filename&gt; <span class="comment"># 图片名</span></span><br><span class="line">  &lt;path&gt;~/frcnn-image/<span class="number">61</span>/ADAS/image/frcnn-image/<span class="number">17</span>/<span class="number">77258.</span>bmp&lt;/path&gt;</span><br><span class="line">  &lt;source&gt;  <span class="comment">#图片来源相关信息</span></span><br><span class="line">    &lt;database&gt;Unknown&lt;/database&gt;  </span><br><span class="line">  &lt;/source&gt;</span><br><span class="line">  &lt;size&gt; <span class="comment">#图片尺寸</span></span><br><span class="line">    &lt;width&gt;<span class="number">640</span>&lt;/width&gt;</span><br><span class="line">    &lt;height&gt;<span class="number">480</span>&lt;/height&gt;</span><br><span class="line">    &lt;depth&gt;<span class="number">3</span>&lt;/depth&gt;</span><br><span class="line">  &lt;/size&gt;</span><br><span class="line">  &lt;segmented&gt;<span class="number">0</span>&lt;/segmented&gt;  <span class="comment">#是否有分割label</span></span><br><span class="line">  &lt;<span class="built_in">object</span>&gt; 包含的物体</span><br><span class="line">    &lt;name&gt;car&lt;/name&gt;  <span class="comment">#物体类别</span></span><br><span class="line">    &lt;pose&gt;Unspecified&lt;/pose&gt;  <span class="comment">#物体的姿态</span></span><br><span class="line">    &lt;truncated&gt;<span class="number">0</span>&lt;/truncated&gt;  <span class="comment">#物体是否被部分遮挡（&gt;15%）</span></span><br><span class="line">    &lt;difficult&gt;<span class="number">0</span>&lt;/difficult&gt;  <span class="comment">#是否为难以辨识的物体， 主要指要结体背景才能判断出类别的物体。虽有标注， 但一般忽略这类物体</span></span><br><span class="line">    &lt;bndbox&gt;  <span class="comment">#物体的bound box</span></span><br><span class="line">      &lt;xmin&gt;<span class="number">2</span>&lt;/xmin&gt;     <span class="comment">#左</span></span><br><span class="line">      &lt;ymin&gt;<span class="number">156</span>&lt;/ymin&gt;   <span class="comment">#上</span></span><br><span class="line">      &lt;xmax&gt;<span class="number">111</span>&lt;/xmax&gt;   <span class="comment">#右</span></span><br><span class="line">      &lt;ymax&gt;<span class="number">259</span>&lt;/ymax&gt;   <span class="comment">#下</span></span><br><span class="line">    &lt;/bndbox&gt;</span><br><span class="line">  &lt;/<span class="built_in">object</span>&gt;</span><br><span class="line">&lt;/annotation&gt;</span><br></pre></td></tr></table></figure><h3 id="自制VOC数据集"><a href="#自制VOC数据集" class="headerlink" title="自制VOC数据集"></a>自制VOC数据集</h3><p>首先，按照VOC2007的数据集格式要求，分别创建文件夹VOCdevkit、VOC2007、Annotations、ImageSets、Main和JPEGImages，它们的层级结构如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─VOCdevkit</span><br><span class="line">    └─VOC2007</span><br><span class="line">        ├─Annotations</span><br><span class="line">        ├─ImageSets</span><br><span class="line">        │  └─Main</span><br><span class="line">        └─JPEGImages</span><br></pre></td></tr></table></figure><p>可使用命令快速创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p VOCdevkit/VOC2007/&#123;Annotations,ImageSets/Main,JPEGImages&#125;</span><br></pre></td></tr></table></figure><p>其中，Annotations用来存放xml标注文件，JPEGImages用来存放图片文件，而ImageSets/Main存放几个txt文本文件，文件的内容是训练集、验证集和测试集中图片的名称(去掉扩展名)，这几个文本文件是需要我们自己生成的，后面会讲到。</p><p>接下来，将images文件夹中的图片文件拷贝到JPEGImages文件夹中，将images文件中的xml标注文件拷贝到Annotations文件夹中<br>接下来新建一个脚本，把它放在VOCdevkit/VOC2007文件夹下，命名为test.py    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">─VOCdevkit</span><br><span class="line">    └─VOC2007</span><br><span class="line">        │  test.py</span><br><span class="line">        │</span><br><span class="line">        ├─Annotations</span><br><span class="line">        ├─ImageSets</span><br><span class="line">        │  └─Main</span><br><span class="line">        └─JPEGImages</span><br></pre></td></tr></table></figure><p>脚本的内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集和验证集的比例分配</span></span><br><span class="line">trainval_percent = <span class="number">0.1</span></span><br><span class="line">train_percent = <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标注文件的路径</span></span><br><span class="line">xmlfilepath = <span class="string">&#x27;Annotations&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成的txt文件存放路径</span></span><br><span class="line">txtsavepath = <span class="string">&#x27;ImageSets\Main&#x27;</span></span><br><span class="line">total_xml = os.listdir(xmlfilepath)</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">len</span>(total_xml)</span><br><span class="line"><span class="built_in">list</span> = <span class="built_in">range</span>(num)</span><br><span class="line">tv = <span class="built_in">int</span>(num * trainval_percent)</span><br><span class="line">tr = <span class="built_in">int</span>(tv * train_percent)</span><br><span class="line">trainval = random.sample(<span class="built_in">list</span>, tv)</span><br><span class="line">train = random.sample(trainval, tr)</span><br><span class="line"></span><br><span class="line">ftrainval = <span class="built_in">open</span>(<span class="string">&#x27;ImageSets/Main/trainval.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">ftest = <span class="built_in">open</span>(<span class="string">&#x27;ImageSets/Main/test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">ftrain = <span class="built_in">open</span>(<span class="string">&#x27;ImageSets/Main/train.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">fval = <span class="built_in">open</span>(<span class="string">&#x27;ImageSets/Main/val.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    name = total_xml[i][:-<span class="number">4</span>] + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> trainval:</span><br><span class="line">        ftrainval.write(name)</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> train:</span><br><span class="line">            ftest.write(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fval.write(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ftrain.write(name)</span><br><span class="line"></span><br><span class="line">ftrainval.close()</span><br><span class="line">ftrain.close()</span><br><span class="line">fval.close()</span><br><span class="line">ftest.close()</span><br></pre></td></tr></table></figure><p>然后，进入到目录VOCdevkit/VOC2007，执行这个脚本，结束后，在ImageSets/Main下生成了4个txt文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├─ImageSets</span><br><span class="line">│  └─Main</span><br><span class="line">│          test.txt</span><br><span class="line">│          train.txt</span><br><span class="line">│          trainval.txt</span><br><span class="line">│          val.txt</span><br><span class="line">│</span><br><span class="line">└─JPEGImages</span><br></pre></td></tr></table></figure><p>这4个文件的格式都是一样的，文件的内容是对应图片名称去掉扩展名(与xml标注文件去掉.xml一致)的结果</p><p>然后新建脚本voc_labels.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir, getcwd</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始脚本中包含了VOC2012，这里，我们把它删除</span></span><br><span class="line"><span class="comment"># sets=[(&#x27;2012&#x27;, &#x27;train&#x27;), (&#x27;2012&#x27;, &#x27;val&#x27;), (&#x27;2007&#x27;, &#x27;train&#x27;), (&#x27;2007&#x27;, &#x27;val&#x27;), (&#x27;2007&#x27;, &#x27;test&#x27;)]</span></span><br><span class="line">sets=[(<span class="string">&#x27;2007&#x27;</span>, <span class="string">&#x27;train&#x27;</span>), (<span class="string">&#x27;2007&#x27;</span>, <span class="string">&#x27;val&#x27;</span>), (<span class="string">&#x27;2007&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># classes也需要根据自己的实际情况修改</span></span><br><span class="line"><span class="comment"># classes = [&quot;aeroplane&quot;, &quot;bicycle&quot;, &quot;bird&quot;, &quot;boat&quot;, &quot;bottle&quot;, &quot;bus&quot;, &quot;car&quot;, &quot;cat&quot;, &quot;chair&quot;, &quot;cow&quot;, &quot;diningtable&quot;, &quot;dog&quot;, &quot;horse&quot;, &quot;motorbike&quot;, &quot;person&quot;, &quot;pottedplant&quot;, &quot;sheep&quot;, &quot;sofa&quot;, &quot;train&quot;, &quot;tvmonitor&quot;]</span></span><br><span class="line">classes = [<span class="string">&quot;hat&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">size, box</span>):</span><br><span class="line">    dw = <span class="number">1.</span>/size[<span class="number">0</span>]</span><br><span class="line">    dh = <span class="number">1.</span>/size[<span class="number">1</span>]</span><br><span class="line">    x = (box[<span class="number">0</span>] + box[<span class="number">1</span>])/<span class="number">2.0</span></span><br><span class="line">    y = (box[<span class="number">2</span>] + box[<span class="number">3</span>])/<span class="number">2.0</span></span><br><span class="line">    w = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    x = x*dw</span><br><span class="line">    w = w*dw</span><br><span class="line">    y = y*dh</span><br><span class="line">    h = h*dh</span><br><span class="line">    <span class="keyword">return</span> (x,y,w,h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_annotation</span>(<span class="params">year, image_id</span>):</span><br><span class="line">    in_file = <span class="built_in">open</span>(<span class="string">&#x27;VOCdevkit/VOC%s/Annotations/%s.xml&#x27;</span>%(year, image_id))</span><br><span class="line">    out_file = <span class="built_in">open</span>(<span class="string">&#x27;VOCdevkit/VOC%s/labels/%s.txt&#x27;</span>%(year, image_id), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    tree=ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    w = <span class="built_in">int</span>(size.find(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">    h = <span class="built_in">int</span>(size.find(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">        difficult = obj.find(<span class="string">&#x27;difficult&#x27;</span>).text</span><br><span class="line">        cls = obj.find(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> classes <span class="keyword">or</span> <span class="built_in">int</span>(difficult) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        b = (<span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmin&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmax&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymin&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymax&#x27;</span>).text))</span><br><span class="line">        bb = convert((w,h), b)</span><br><span class="line">        out_file.write(<span class="built_in">str</span>(cls_id) + <span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span>.join([<span class="built_in">str</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> bb]) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wd = getcwd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> year, image_set <span class="keyword">in</span> sets:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;VOCdevkit/VOC%s/labels/&#x27;</span>%(year)):</span><br><span class="line">        os.makedirs(<span class="string">&#x27;VOCdevkit/VOC%s/labels/&#x27;</span>%(year))</span><br><span class="line">    image_ids = <span class="built_in">open</span>(<span class="string">&#x27;VOCdevkit/VOC%s/ImageSets/Main/%s.txt&#x27;</span>%(year, image_set)).read().strip().split()</span><br><span class="line">    list_file = <span class="built_in">open</span>(<span class="string">&#x27;%s_%s.txt&#x27;</span>%(year, image_set), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> image_id <span class="keyword">in</span> image_ids:</span><br><span class="line">        list_file.write(<span class="string">&#x27;%s/VOCdevkit/VOC%s/JPEGImages/%s.jpg\n&#x27;</span>%(wd, year, image_id))</span><br><span class="line">        convert_annotation(year, image_id)</span><br><span class="line">    list_file.close()</span><br></pre></td></tr></table></figure><p>执行上述脚本后，在VOCdevkit同级目录就会生成2007_train.txt、2007_val.txt、2007_test.txt。<br>自制的VOC2007数据集就已经准备好了。对应到darknet中的配置文件cfg/voc.data就可以这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">classes= 1</span><br><span class="line">train  = 2007_train.txt</span><br><span class="line">valid  = 2007_val.txt</span><br><span class="line">names = data/voc.names</span><br><span class="line">backup = backup/</span><br></pre></td></tr></table></figure><h2 id="VOC-To-YOLO"><a href="#VOC-To-YOLO" class="headerlink" title="VOC_To_YOLO"></a>VOC_To_YOLO</h2><blockquote><p>labelImg可以导出YOLO的数据格式。但是如果你拿到的是一份标注格式为xml的数据，那就需要进行转换了。</p></blockquote><p>将所有图片存放在images文件夹，xml标注文件放在Annotations文件夹，然后创建一个文件夹labels</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├─Annotations</span><br><span class="line">├─images</span><br><span class="line">├─labels</span><br><span class="line">└─voc_to_yolo.py</span><br></pre></td></tr></table></figure><p>可使用命令快速创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> Annotations images labels</span><br></pre></td></tr></table></figure><p>新建脚本voc_to_yolo.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> listdir, getcwd</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据自己情况修改</span></span><br><span class="line">classes = [<span class="string">&quot;hat&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">size, box</span>):</span><br><span class="line">    dw = <span class="number">1.</span> / size[<span class="number">0</span>]</span><br><span class="line">    dh = <span class="number">1.</span> / size[<span class="number">1</span>]</span><br><span class="line">    x = (box[<span class="number">0</span>] + box[<span class="number">1</span>]) / <span class="number">2.0</span></span><br><span class="line">    y = (box[<span class="number">2</span>] + box[<span class="number">3</span>]) / <span class="number">2.0</span></span><br><span class="line">    w = box[<span class="number">1</span>] - box[<span class="number">0</span>]</span><br><span class="line">    h = box[<span class="number">3</span>] - box[<span class="number">2</span>]</span><br><span class="line">    x = x * dw</span><br><span class="line">    w = w * dw</span><br><span class="line">    y = y * dh</span><br><span class="line">    h = h * dh</span><br><span class="line">    <span class="keyword">return</span> (x, y, w, h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_annotation</span>(<span class="params">image_id</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;Annotations/%s.xml&#x27;</span> % (image_id)):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    in_file = <span class="built_in">open</span>(<span class="string">&#x27;annotations/%s.xml&#x27;</span> % (image_id))</span><br><span class="line"></span><br><span class="line">    out_file = <span class="built_in">open</span>(<span class="string">&#x27;labels/%s.txt&#x27;</span> % (image_id), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    tree = ET.parse(in_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    size = root.find(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">    w = <span class="built_in">int</span>(size.find(<span class="string">&#x27;width&#x27;</span>).text)</span><br><span class="line">    h = <span class="built_in">int</span>(size.find(<span class="string">&#x27;height&#x27;</span>).text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">        cls = obj.find(<span class="string">&#x27;name&#x27;</span>).text</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> classes:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cls_id = classes.index(cls)</span><br><span class="line">        xmlbox = obj.find(<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        b = (<span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmin&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;xmax&#x27;</span>).text), <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymin&#x27;</span>).text),</span><br><span class="line">             <span class="built_in">float</span>(xmlbox.find(<span class="string">&#x27;ymax&#x27;</span>).text))</span><br><span class="line">        bb = convert((w, h), b)</span><br><span class="line">        out_file.write(<span class="built_in">str</span>(cls_id) + <span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span>.join([<span class="built_in">str</span>(a) <span class="keyword">for</span> a <span class="keyword">in</span> bb]) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> os.listdir(<span class="string">&#x27;images&#x27;</span>):</span><br><span class="line">    <span class="comment"># 这里需要根据你的图片情况进行对应修改。比如图片名称是123.456.jpg，这里就会出错了。一般来讲，如果图片格式固定，如全都是jpg，那就image_id=image[:-4]处理就好了。总之，情况比较多，自己看着办，哈哈！</span></span><br><span class="line">    image_id = image.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    convert_annotation(image_id)</span><br></pre></td></tr></table></figure><p>执行上述脚本后，labels文件夹就会生成txt格式的标注文件了</p><p>yolov5训练时使用的数据集结构是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├─test</span><br><span class="line">│  ├─images</span><br><span class="line">│  └─labels</span><br><span class="line">├─train</span><br><span class="line">│  ├─images</span><br><span class="line">│  └─labels</span><br><span class="line">└─valid</span><br><span class="line">    ├─images</span><br><span class="line">    └─labels</span><br></pre></td></tr></table></figure><p>可使用命令快速创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p &#123;<span class="built_in">test</span>,train,valid&#125;/&#123;images,labels&#125;</span><br></pre></td></tr></table></figure><p>目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├─Annotations</span><br><span class="line">├─images</span><br><span class="line">├─labels</span><br><span class="line">├─test</span><br><span class="line">│  ├─images</span><br><span class="line">│  └─labels</span><br><span class="line">├─train</span><br><span class="line">│  ├─images</span><br><span class="line">│  └─labels</span><br><span class="line">└─valid</span><br><span class="line">    ├─images</span><br><span class="line">    └─labels</span><br><span class="line">└─voc_to_yolo.py</span><br><span class="line">└─distribution.py</span><br></pre></td></tr></table></figure><p>我们还需要将图片文件和对应的txt标签文件再进行一次划分，首先创建外层的train、valid、test文件夹，然后在每个文件夹底下都分别创建images和labels文件夹<br>新建distribution.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集、验证集和测试集的比例分配</span></span><br><span class="line">test_percent = <span class="number">0.1</span></span><br><span class="line">valid_percent = <span class="number">0.2</span></span><br><span class="line">train_percent = <span class="number">0.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标注文件的路径</span></span><br><span class="line">image_path = <span class="string">&#x27;images&#x27;</span></span><br><span class="line">label_path = <span class="string">&#x27;labels&#x27;</span></span><br><span class="line"></span><br><span class="line">images_files_list = os.listdir(image_path)</span><br><span class="line">labels_files_list = os.listdir(label_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;images files: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;labels files: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list))</span><br><span class="line">total_num = <span class="built_in">len</span>(images_files_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;total_num: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(total_num))</span><br><span class="line"></span><br><span class="line">test_num = <span class="built_in">int</span>(total_num * test_percent)</span><br><span class="line">valid_num = <span class="built_in">int</span>(total_num * valid_percent)</span><br><span class="line">train_num = <span class="built_in">int</span>(total_num * train_percent)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应文件的索引</span></span><br><span class="line">test_image_index = random.sample(<span class="built_in">range</span>(total_num), test_num)</span><br><span class="line">valid_image_index = random.sample(<span class="built_in">range</span>(total_num), valid_num) </span><br><span class="line">train_image_index = random.sample(<span class="built_in">range</span>(total_num), train_num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(total_num):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;src image: &#123;&#125;, i=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i], i))</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> test_image_index:</span><br><span class="line">        <span class="comment"># 将图片和标签文件拷贝到对应文件夹下</span></span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]), <span class="string">&#x27;test/images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]))</span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]), <span class="string">&#x27;test/labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]))</span><br><span class="line">    <span class="keyword">elif</span> i <span class="keyword">in</span> valid_image_index:</span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]), <span class="string">&#x27;valid/images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]))</span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]), <span class="string">&#x27;valid/labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]), <span class="string">&#x27;train/images/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(images_files_list[i]))</span><br><span class="line">        shutil.copyfile(<span class="string">&#x27;labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]), <span class="string">&#x27;train/labels/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(labels_files_list[i]))</span><br></pre></td></tr></table></figure><p>执行代码后，可以看到类似文件层级结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">─test</span><br><span class="line">│  ├─images</span><br><span class="line">│  │      1234565343231.jpg</span><br><span class="line">│  │      1559035146628.jpg</span><br><span class="line">│  │      2019032210151.jpg</span><br><span class="line">│  │</span><br><span class="line">│  └─labels</span><br><span class="line">│          1234565343231.txt</span><br><span class="line">│          1559035146628.txt</span><br><span class="line">│          2019032210151.txt</span><br><span class="line">│</span><br><span class="line">├─train</span><br><span class="line">│  ├─images</span><br><span class="line">│  │      1213211.jpg</span><br><span class="line">│  │      12i4u33112.jpg</span><br><span class="line">│  │      1559092537114.jpg</span><br><span class="line">│  │</span><br><span class="line">│  └─labels</span><br><span class="line">│          1213211.txt</span><br><span class="line">│          12i4u33112.txt</span><br><span class="line">│          1559092537114.txt</span><br><span class="line">│</span><br><span class="line">└─valid</span><br><span class="line">    ├─images</span><br><span class="line">    │      120131247621.jpg</span><br><span class="line">    │      124iuy311.jpg</span><br><span class="line">    │      1559093141383.jpg</span><br><span class="line">    │</span><br><span class="line">    └─labels</span><br><span class="line">            120131247621.txt</span><br><span class="line">            124iuy311.txt</span><br><span class="line">            1559093141383.txt</span><br></pre></td></tr></table></figure><h2 id="YOLO-To-VOC"><a href="#YOLO-To-VOC" class="headerlink" title="YOLO_To_VOC"></a>YOLO_To_VOC</h2><p>拿到了txt的标注，但是需要使用VOC，也需要进行转换。看下面这个脚本，注释写在代码中</p><p>新建yolo_to_voc.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片文件夹，后面的/不能省</span></span><br><span class="line">img_path = <span class="string">&#x27;images/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># txt文件夹，后面的/不能省</span></span><br><span class="line">labels_path = <span class="string">&#x27;labels/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># xml存放的文件夹，后面的/不能省</span></span><br><span class="line">annotations_path = <span class="string">&#x27;Annotations/&#x27;</span></span><br><span class="line"></span><br><span class="line">labels = os.listdir(labels_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别</span></span><br><span class="line">classes = [<span class="string">&quot;hat&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片的高度、宽度、深度</span></span><br><span class="line">sh = sw = sd = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_xml</span>(<span class="params">imgname, sw, sh, sd, filepath, labeldicts</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    imgname: 没有扩展名的图片名称</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建Annotation根节点</span></span><br><span class="line">    root = ET.Element(<span class="string">&#x27;Annotation&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建filename子节点，无扩展名                 </span></span><br><span class="line">    ET.SubElement(root, <span class="string">&#x27;filename&#x27;</span>).text = <span class="built_in">str</span>(imgname)        </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建size子节点 </span></span><br><span class="line">    sizes = ET.SubElement(root,<span class="string">&#x27;size&#x27;</span>)                                      </span><br><span class="line">    ET.SubElement(sizes, <span class="string">&#x27;width&#x27;</span>).text = <span class="built_in">str</span>(sw)</span><br><span class="line">    ET.SubElement(sizes, <span class="string">&#x27;height&#x27;</span>).text = <span class="built_in">str</span>(sh)</span><br><span class="line">    ET.SubElement(sizes, <span class="string">&#x27;depth&#x27;</span>).text = <span class="built_in">str</span>(sd) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> labeldict <span class="keyword">in</span> labeldicts:</span><br><span class="line">        objects = ET.SubElement(root, <span class="string">&#x27;object&#x27;</span>)                 </span><br><span class="line">        ET.SubElement(objects, <span class="string">&#x27;name&#x27;</span>).text = labeldict[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        ET.SubElement(objects, <span class="string">&#x27;pose&#x27;</span>).text = <span class="string">&#x27;Unspecified&#x27;</span></span><br><span class="line">        ET.SubElement(objects, <span class="string">&#x27;truncated&#x27;</span>).text = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        ET.SubElement(objects, <span class="string">&#x27;difficult&#x27;</span>).text = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        bndbox = ET.SubElement(objects,<span class="string">&#x27;bndbox&#x27;</span>)</span><br><span class="line">        ET.SubElement(bndbox, <span class="string">&#x27;xmin&#x27;</span>).text = <span class="built_in">str</span>(<span class="built_in">int</span>(labeldict[<span class="string">&#x27;xmin&#x27;</span>]))</span><br><span class="line">        ET.SubElement(bndbox, <span class="string">&#x27;ymin&#x27;</span>).text = <span class="built_in">str</span>(<span class="built_in">int</span>(labeldict[<span class="string">&#x27;ymin&#x27;</span>]))</span><br><span class="line">        ET.SubElement(bndbox, <span class="string">&#x27;xmax&#x27;</span>).text = <span class="built_in">str</span>(<span class="built_in">int</span>(labeldict[<span class="string">&#x27;xmax&#x27;</span>]))</span><br><span class="line">        ET.SubElement(bndbox, <span class="string">&#x27;ymax&#x27;</span>).text = <span class="built_in">str</span>(<span class="built_in">int</span>(labeldict[<span class="string">&#x27;ymax&#x27;</span>]))</span><br><span class="line">    tree = ET.ElementTree(root)</span><br><span class="line">    tree.write(filepath, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> labels:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(labels_path + label, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        img_id = os.path.splitext(label)[<span class="number">0</span>]</span><br><span class="line">        contents = f.readlines()</span><br><span class="line">        labeldicts = []</span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> contents:</span><br><span class="line">            <span class="comment"># 这里要看你的图片格式了，我这里是jpg，注意修改</span></span><br><span class="line">            img = np.array(Image.<span class="built_in">open</span>(img_path + label.strip(<span class="string">&#x27;.txt&#x27;</span>) + <span class="string">&#x27;.jpg&#x27;</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 图片的高度和宽度</span></span><br><span class="line">            sh, sw, sd = img.shape[<span class="number">0</span>], img.shape[<span class="number">1</span>], img.shape[<span class="number">2</span>]</span><br><span class="line">            content = content.strip(<span class="string">&#x27;\n&#x27;</span>).split()</span><br><span class="line">            x = <span class="built_in">float</span>(content[<span class="number">1</span>])*sw</span><br><span class="line">            y = <span class="built_in">float</span>(content[<span class="number">2</span>])*sh</span><br><span class="line">            w = <span class="built_in">float</span>(content[<span class="number">3</span>])*sw</span><br><span class="line">            h = <span class="built_in">float</span>(content[<span class="number">4</span>])*sh</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 坐标的转换，x_center y_center width height -&gt; xmin ymin xmax ymax</span></span><br><span class="line">            new_dict = &#123;<span class="string">&#x27;name&#x27;</span>: classes[<span class="built_in">int</span>(content[<span class="number">0</span>])],</span><br><span class="line">                        <span class="string">&#x27;difficult&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;xmin&#x27;</span>: x+<span class="number">1</span>-w/<span class="number">2</span>,                     </span><br><span class="line">                        <span class="string">&#x27;ymin&#x27;</span>: y+<span class="number">1</span>-h/<span class="number">2</span>,</span><br><span class="line">                        <span class="string">&#x27;xmax&#x27;</span>: x+<span class="number">1</span>+w/<span class="number">2</span>,</span><br><span class="line">                        <span class="string">&#x27;ymax&#x27;</span>: y+<span class="number">1</span>+h/<span class="number">2</span></span><br><span class="line">                        &#125;</span><br><span class="line">            labeldicts.append(new_dict)</span><br><span class="line">        write_xml(img_id, sw, sh, sd, annotations_path + label.strip(<span class="string">&#x27;.txt&#x27;</span>) + <span class="string">&#x27;.xml&#x27;</span>, labeldicts)</span><br></pre></td></tr></table></figure><!-- ![](https://user-images.githubusercontent.com/48054808/157835276-9aab9d1c-1c46-446b-bdd4-5ab75c5cfa48.png) 引用 --><!-- <img src="https://user-images.githubusercontent.com/48054808/157835276-9aab9d1c-1c46-446b-bdd4-5ab75c5cfa48.png" width="20"/> 引用 --><p>引用</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/383660741">https://zhuanlan.zhihu.com/p/383660741</a></p><p><a href="https://zhuanlan.zhihu.com/p/461488682">https://zhuanlan.zhihu.com/p/461488682</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu22.04设置静态ip</title>
      <link href="/2023/01/24/Ubuntu22.04%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/"/>
      <url>/2023/01/24/Ubuntu22.04%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/</url>
      
        <content type="html"><![CDATA[<h2 id="查看网卡"><a href="#查看网卡" class="headerlink" title="查看网卡"></a>查看网卡</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:69:f0:8b:f5  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens160: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.0.27  netmask 255.255.255.0  broadcast 192.168.0.255</span><br><span class="line">        inet6 fe80::20c:29ff:fea0:c420  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:a0:c4:20  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 10021  bytes 919655 (919.6 KB)</span><br><span class="line">        RX errors 0  dropped 5  overruns 0  frame 0</span><br><span class="line">        TX packets 7629  bytes 9885571 (9.8 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 427  bytes 502877 (502.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 427  bytes 502877 (502.8 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/netplan/</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00-installer-config.yaml</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim sudo vim 00-installer-config.yaml </span><br></pre></td></tr></table></figure><ul><li>这里选择要修改的网卡的配置文件<h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># This is the network config written by &#x27;subiquity&#x27;</span><br><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens160:</span><br><span class="line">      dhcp4: false</span><br><span class="line">      addresses:</span><br><span class="line">        - 192.168.0.27/24</span><br><span class="line">      routes:</span><br><span class="line">        - to: default</span><br><span class="line">          via: 192.168.0.1</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [114.114.114.114,8.8.8.8]</span><br><span class="line">  version: 2</span><br></pre></td></tr></table></figure><h2 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 网络配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js杂项</title>
      <link href="/2023/01/06/js_learn/"/>
      <url>/2023/01/06/js_learn/</url>
      
        <content type="html"><![CDATA[<h2 id="js变量在内存中的存储形式-P49"><a href="#js变量在内存中的存储形式-P49" class="headerlink" title="js变量在内存中的存储形式 P49"></a>js变量在内存中的存储形式 P49</h2><h2 id="函数的骚操作立即函数-P56"><a href="#函数的骚操作立即函数-P56" class="headerlink" title="函数的骚操作立即函数 P56"></a>函数的骚操作立即函数 P56</h2>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/04/hello-world/"/>
      <url>/2023/01/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ROS2的安装</title>
      <link href="/2022/09/15/ros2%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2022/09/15/ros2%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="设置编码"><a href="#设置编码" class="headerlink" title="设置编码"></a>设置编码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install locales</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo locale-gen en_US en_US.UTF-8</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><!-- | 模型名称       | COCO精度（mAP） | 骁龙865 四线程速度(ms) | 配置文件                                                | 模型下载                                                                              ||:---------- |:-----------:|:---------------:|:---------------------------------------------------:|:---------------------------------------------------------------------------------:|| PicoDet-XS | 23.5        | 7.81            | [链接](configs/picodet/picodet_xs_320_coco_lcnet.yml) | [下载地址](https://paddledet.bj.bcebos.com/models/picodet_xs_320_coco_lcnet.pdparams) || PicoDet-S  | 29.1        | 9.56            | [链接](configs/picodet/picodet_s_320_coco_lcnet.yml)  | [下载地址](https://paddledet.bj.bcebos.com/models/picodet_s_320_coco_lcnet.pdparams)  || PicoDet-M  | 34.4        | 17.68           | [链接](configs/picodet/picodet_m_320_coco_lcnet.yml)  | [下载地址](https://paddledet.bj.bcebos.com/models/picodet_m_320_coco_lcnet.pdparams)  || PicoDet-L  | 36.1        | 25.21           | [链接](configs/picodet/picodet_l_320_coco_lcnet.yml)  | [下载地址](https://paddledet.bj.bcebos.com/models/picodet_l_320_coco_lcnet.pdparams)  | --><h2 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install curl gnupg lsb-release </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu <span class="subst">$(source /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME)</span> main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/ros2.list &gt; /dev/null</span><br></pre></td></tr></table></figure><blockquote><p>如遇报错“Failed to connect to raw.githubusercontent.com”，可参考<a href="https://www.guyuehome.com/37844">https://www.guyuehome.com/37844</a></p></blockquote><h2 id="安装ROS2"><a href="#安装ROS2" class="headerlink" title="安装ROS2"></a>安装ROS2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用:"></a>引用:</h2><ul><li><a href="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1">https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1</a></li><li><a href="https://fishros.com/d2lros2/#/">https://fishros.com/d2lros2/#/</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> ros2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18.04的python更新3.8.13</title>
      <link href="/2022/08/24/ubuntu18.04%E7%9A%84python%E6%9B%B4%E6%96%B03.8.13/"/>
      <url>/2022/08/24/ubuntu18.04%E7%9A%84python%E6%9B%B4%E6%96%B03.8.13/</url>
      
        <content type="html"><![CDATA[<h2 id="查看python3指向"><a href="#查看python3指向" class="headerlink" title="查看python3指向"></a>查看python3指向</h2><p><code>python3 -V</code></p><h2 id="查看python的指向。"><a href="#查看python的指向。" class="headerlink" title="查看python的指向。"></a>查看python的指向。</h2><p><code>ls -l /usr/bin | grep python</code></p><h2 id="查看本地已安装的python"><a href="#查看本地已安装的python" class="headerlink" title="查看本地已安装的python"></a>查看本地已安装的python</h2><p><code>ls /usr/bin/python*</code></p><h2 id="首先更新软件包列表并安装必备组件："><a href="#首先更新软件包列表并安装必备组件：" class="headerlink" title="首先更新软件包列表并安装必备组件："></a>首先更新软件包列表并安装必备组件：</h2><p><code>sudo apt update</code><br><br><code>sudo apt install software-properties-common</code></p><h2 id="直接使用apt-get安装python3-8"><a href="#直接使用apt-get安装python3-8" class="headerlink" title="直接使用apt-get安装python3.8"></a>直接使用apt-get安装python3.8</h2><p><code>apt-get install python3.7</code></p><h2 id="将Python-3-6和Python-3-8添加到更新替代项"><a href="#将Python-3-6和Python-3-8添加到更新替代项" class="headerlink" title="将Python 3.6和Python 3.8添加到更新替代项"></a>将Python 3.6和Python 3.8添加到更新替代项</h2><p><code>sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1</code><br><br><code>sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2</code></p><h2 id="更新Python-3以指向Python-3-7"><a href="#更新Python-3以指向Python-3-7" class="headerlink" title="更新Python 3以指向Python 3.7"></a>更新Python 3以指向Python 3.7</h2><blockquote><p>默认情况下，Python 3.6指向Python3。这意味着当我们运行python3时，它将作为python3.6执行，但我们希望将其作为python3.8执行。</p></blockquote><h3 id="输入以下命令以配置python3："><a href="#输入以下命令以配置python3：" class="headerlink" title="输入以下命令以配置python3："></a>输入以下命令以配置python3：</h3><p><code>sudo update-alternatives --config python3</code></p><blockquote><p>您应该获得以上输出。 现在键入2并按Enter键以使用Python 3.8。 请记住，选择号可能会有所不同，因此请选择适用于Python 3.8的选择号。</p></blockquote><h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h2><blockquote><p>由于WSL中的python3.8，已经不存在platform.linux_distribution()方法。而通过apt安装的pip版本为8.1.1，需要进行更新<br>解决方法</p></blockquote><p><code>sudo apt remove python3-pip</code><br><br><code>sudo python3.8 -m easy_install pip</code></p><h3 id="将pip3替换pip"><a href="#将pip3替换pip" class="headerlink" title="将pip3替换pip"></a>将pip3替换pip</h3><blockquote><p>按情况可选</p></blockquote><p><code>sudo Python3 -m pip install --upgrade pip</code></p><blockquote><p>pip3命令已经成为pip了，以后只需要使用pip就可以了。打开Python控制台，导入requests包，并没有报错，说明pip安装的是成功的。</p></blockquote><h2 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h2><blockquote><p>默认都是官网源较慢</p></blockquote><h3 id="国内源列表"><a href="#国内源列表" class="headerlink" title="国内源列表"></a>国内源列表</h3><p>首先来看国内的源列表。老规矩，先列出源列表，如下所示。</p><ul><li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a> </li><li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a> </li><li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a> </li><li>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></li></ul><p>换源流程</p><p>换源命令：</p><p><code>pip config set global.index-url 源链接</code></p><blockquote><p>pip的版本&gt;10，你就可以使用此命令换源，不需要进行复杂的新建文件什么的操作。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nano使用串口播报</title>
      <link href="/2022/08/14/nano%E4%BD%BF%E7%94%A8%E4%B8%B2%E5%8F%A3%E6%92%AD%E6%8A%A5/"/>
      <url>/2022/08/14/nano%E4%BD%BF%E7%94%A8%E4%B8%B2%E5%8F%A3%E6%92%AD%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>Nano端：</p><h3 id="要使用Nano上的串口，用Python控制，先安装Python3版本的py-serial库"><a href="#要使用Nano上的串口，用Python控制，先安装Python3版本的py-serial库" class="headerlink" title="要使用Nano上的串口，用Python控制，先安装Python3版本的py-serial库"></a>要使用Nano上的串口，用Python控制，先安装Python3版本的py-serial库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-serial</span><br></pre></td></tr></table></figure><h3 id="与PC通信的例程可在GitHub上下载（或者直接打开网址手动下载）"><a href="#与PC通信的例程可在GitHub上下载（或者直接打开网址手动下载）" class="headerlink" title="与PC通信的例程可在GitHub上下载（或者直接打开网址手动下载）"></a>与PC通信的例程可在GitHub上下载（或者直接打开网址手动下载）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/JetsonHacksNano/UARTDemo</span><br></pre></td></tr></table></figure><h3 id="打开串口权限（每次关机后Nano都关闭串口，所以每次使用时都要打开一次）"><a href="#打开串口权限（每次关机后Nano都关闭串口，所以每次使用时都要打开一次）" class="headerlink" title="打开串口权限（每次关机后Nano都关闭串口，所以每次使用时都要打开一次）"></a>打开串口权限（每次关机后Nano都关闭串口，所以每次使用时都要打开一次）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 777 /dev/ttyTHS1</span><br></pre></td></tr></table></figure><h3 id="进入下载好的UARTDemo文件夹，终端运行程序"><a href="#进入下载好的UARTDemo文件夹，终端运行程序" class="headerlink" title="进入下载好的UARTDemo文件夹，终端运行程序"></a>进入下载好的UARTDemo文件夹，终端运行程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> UARTDemo</span><br><span class="line">sudo python3 uart_example.py</span><br></pre></td></tr></table></figure><h2 id="硬件接线-对应"><a href="#硬件接线-对应" class="headerlink" title="硬件接线(对应)"></a>硬件接线(对应)</h2><table><thead><tr><th>Nano</th><th>播报模块</th></tr></thead><tbody><tr><td>引脚8(TXD)</td><td>PB6(RXD)</td></tr><tr><td>引脚10(RXD)</td><td>PB5(TXD)</td></tr><tr><td>引脚6(GND)</td><td>GND</td></tr><tr><td>引脚2(5V)</td><td>5V</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> uart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy随笔</title>
      <link href="/2022/08/14/numpy/"/>
      <url>/2022/08/14/numpy/</url>
      
        <content type="html"><![CDATA[<h1 id="numpy-Numerical-Python"><a href="#numpy-Numerical-Python" class="headerlink" title="numpy(Numerical Python)"></a>numpy(Numerical Python)</h1><ul><li>一个开源的Python科学计算库</li><li>使用Numpy可以方便的使用数组、和矩阵进行计算</li><li>包含线性代数、傅里叶变换、随机数生成等大量函数<h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2></li><li>代码简洁 ：直接以数组、矩阵为粒度计算并且支持大量的数学函数</li><li>性能更高效：大部分代码由C语言实现，数组存储效率和输入输出计算性能要比使用Python中的List或者嵌套List要好得多<blockquote><p>Numpy 是Python各种数据科学类库的基础库</p><ul><li>比如SciPy、Scikit-Lenarn、Tensorflow、PaddlePaddle等</li><li></li></ul></blockquote><h6 id="魔法命令"><a href="#魔法命令" class="headerlink" title="魔法命令"></a>魔法命令</h6><code>%timeit //显示函数运行时间</code><h4 id="python中-as-取别名"><a href="#python中-as-取别名" class="headerlink" title="python中 as 取别名"></a>python中 as 取别名</h4>numpy中<br>np.array(range(10))=np.arange(10)<h4 id="当前的数类型"><a href="#当前的数类型" class="headerlink" title="当前的数类型"></a>当前的数类型</h4>a.dtype()<h4 id="调整数据类型"><a href="#调整数据类型" class="headerlink" title="调整数据类型"></a>调整数据类型</h4>a.astype()<h4 id="查看数组的形状"><a href="#查看数组的形状" class="headerlink" title="查看数组的形状"></a>查看数组的形状</h4>a.shape()<h4 id="修改数组的形状"><a href="#修改数组的形状" class="headerlink" title="修改数组的形状"></a>修改数组的形状</h4>a.reshape()<h4 id="展开数组"><a href="#展开数组" class="headerlink" title="展开数组"></a>展开数组</h4>a.flatten()</li></ul><h2 id="nan"><a href="#nan" class="headerlink" title="nan"></a>nan</h2><p>不是一个数字</p><h2 id="inf"><a href="#inf" class="headerlink" title="inf"></a>inf</h2><p>无穷  </p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm换源</title>
      <link href="/2022/08/14/npm%E6%8D%A2%E6%BA%90/"/>
      <url>/2022/08/14/npm%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="查看源"><a href="#查看源" class="headerlink" title="查看源"></a>查看源</h2><h3 id="查看依赖包源地址"><a href="#查看依赖包源地址" class="headerlink" title="查看依赖包源地址"></a>查看依赖包源地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><blockquote><p>默认是指向官方源： <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></p></blockquote><h2 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h2><h3 id="淘宝源"><a href="#淘宝源" class="headerlink" title="淘宝源"></a>淘宝源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><blockquote><p>配置信息文件在 ~/.npmrc</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nano配置cuda</title>
      <link href="/2022/08/14/nano%E9%85%8D%E7%BD%AEcuda/"/>
      <url>/2022/08/14/nano%E9%85%8D%E7%BD%AEcuda/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .bashrc</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/cuda-10.2/bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH</span><br><span class="line">export CUDA_HOME=$CUDA_HOME:/usr/local/cuda-10.2</span><br><span class="line">export ROS_PACKAGE_PATH=$&#123;ROS_PACKAGE_PATH&#125;:~/ros_car/</span><br><span class="line">export CUDA_HOME=/usr/local/cuda</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> cuda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决在Pycharm中opencv代码没有代码补全的方法</title>
      <link href="/2022/08/04/%E8%A7%A3%E5%86%B3%E5%9C%A8Pycharm%E4%B8%ADopencv%E4%BB%A3%E7%A0%81%E6%B2%A1%E6%9C%89%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/04/%E8%A7%A3%E5%86%B3%E5%9C%A8Pycharm%E4%B8%ADopencv%E4%BB%A3%E7%A0%81%E6%B2%A1%E6%9C%89%E8%A1%A5%E5%85%A8%E6%8F%90%E7%A4%BA%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>解决在Pycharm中opencv代码没有代码补全的方法</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure><blockquote><p>Python 3.8.10</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip list | grep opencv-python</span><br></pre></td></tr></table></figure><blockquote><p>opencv-python  4.1.2.30</p></blockquote><h2 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h2><p>1.查看opencv的路径<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip show opencv-python</span><br></pre></td></tr></table></figure><blockquote><p>Name: opencv-python<br><br>Version: 4.1.2.30<br><br>Summary: Wrapper package for OpenCV python bindings.<br><br>Home-page: <a href="https://github.com/skvark/opencv-python">https://github.com/skvark/opencv-python</a><br><br>Author:<br><br>Author-email:<br><br>License: MIT<br><br>Location: c:\users\87755\appdata\roaming\python\python38\site-packages<br><br>Requires: numpy<br><br>Required-by:<br></p></blockquote><p>2.打开Pycharm</p><p>设置–&gt;项目–&gt;Python解释器–&gt;点击当前解释器–&gt;显示全部–&gt;添加解释器路径</p><blockquote><p>在终端查询的路径与实际的路径可能不同(实际的路径会包含大小写)<br>前往文件资源管理器复制实际路径添加</p></blockquote><p>3.应用设置后重启Pycharm问题解决</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>torch杂项</title>
      <link href="/2022/08/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/08/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="深度学习网络搭建的基本步骤"><a href="#深度学习网络搭建的基本步骤" class="headerlink" title="深度学习网络搭建的基本步骤"></a>深度学习网络搭建的基本步骤</h2><ul><li>准备数据</li><li>加载数据</li><li>准备模型</li><li>设置损失函数</li><li>设置优化器</li><li>开始训练</li><li>最后验证</li><li>结果聚合展示</li></ul><h2 id="可调用cuda的资源"><a href="#可调用cuda的资源" class="headerlink" title="可调用cuda的资源"></a>可调用cuda的资源</h2><p>网络模型.cuda<br>数据.cuda<br>损失函数.cuda</p><h2 id="给张量增加一个维度"><a href="#给张量增加一个维度" class="headerlink" title="给张量增加一个维度"></a>给张量增加一个维度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgs= torch.unsqueeze(imgs, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="打印张量形状"><a href="#打印张量形状" class="headerlink" title="打印张量形状"></a>打印张量形状</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(t.size())</span><br><span class="line">print(t.shape)</span><br></pre></td></tr></table></figure><h2 id="Pytorch中Tensor与各种图像格式的相互转化"><a href="#Pytorch中Tensor与各种图像格式的相互转化" class="headerlink" title="Pytorch中Tensor与各种图像格式的相互转化"></a>Pytorch中Tensor与各种图像格式的相互转化</h2><h3 id="PIL与Tensor"><a href="#PIL与Tensor" class="headerlink" title="PIL与Tensor"></a>PIL与Tensor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># loader使用torchvision中自带的transforms函数</span></span><br><span class="line">loader = transforms.Compose([</span><br><span class="line">    transforms.ToTensor()])  </span><br><span class="line"></span><br><span class="line">unloader = transforms.ToPILImage()</span><br></pre></td></tr></table></figure><h4 id="PIL读取图片转化为Tensor"><a href="#PIL读取图片转化为Tensor" class="headerlink" title="PIL读取图片转化为Tensor"></a>PIL读取图片转化为Tensor</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入图片地址</span></span><br><span class="line"><span class="comment"># 返回tensor变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_loader</span>(<span class="params">image_name</span>):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_name).convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">    image = loader(image).unsqueeze(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> image.to(device, torch.<span class="built_in">float</span>)</span><br></pre></td></tr></table></figure><h4 id="将PIL图片转化为Tensor"><a href="#将PIL图片转化为Tensor" class="headerlink" title="将PIL图片转化为Tensor"></a>将PIL图片转化为Tensor</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入PIL格式图片</span></span><br><span class="line"><span class="comment"># 返回tensor变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PIL_to_tensor</span>(<span class="params">image</span>):</span><br><span class="line">    image = loader(image).unsqueeze(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> image.to(device, torch.<span class="built_in">float</span>)</span><br></pre></td></tr></table></figure><h4 id="Tensor转化为PIL图片"><a href="#Tensor转化为PIL图片" class="headerlink" title="Tensor转化为PIL图片"></a>Tensor转化为PIL图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入tensor变量</span></span><br><span class="line"><span class="comment"># 输出PIL格式图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tensor_to_PIL</span>(<span class="params">tensor</span>):</span><br><span class="line">    image = tensor.cpu().clone()</span><br><span class="line">    image = image.squeeze(<span class="number">0</span>)</span><br><span class="line">    image = unloader(image)</span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure><h4 id="直接展示tensor格式图片"><a href="#直接展示tensor格式图片" class="headerlink" title="直接展示tensor格式图片"></a>直接展示tensor格式图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">imshow</span>(<span class="params">tensor, title=<span class="literal">None</span></span>):</span><br><span class="line">    image = tensor.cpu().clone()  <span class="comment"># we clone the tensor to not do changes on it</span></span><br><span class="line">    image = image.squeeze(<span class="number">0</span>)  <span class="comment"># remove the fake batch dimension</span></span><br><span class="line">    image = unloader(image)</span><br><span class="line">    plt.imshow(image)</span><br><span class="line">    <span class="keyword">if</span> title <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        plt.title(title)</span><br><span class="line">    plt.pause(<span class="number">0.001</span>)  <span class="comment"># pause a bit so that plots are updated</span></span><br></pre></td></tr></table></figure><h4 id="直接保存tensor格式图片"><a href="#直接保存tensor格式图片" class="headerlink" title="直接保存tensor格式图片"></a>直接保存tensor格式图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_image</span>(<span class="params">tensor, **para</span>):</span><br><span class="line">    <span class="built_in">dir</span> = <span class="string">&#x27;results&#x27;</span></span><br><span class="line">    image = tensor.cpu().clone()  <span class="comment"># we clone the tensor to not do changes on it</span></span><br><span class="line">    image = image.squeeze(<span class="number">0</span>)  <span class="comment"># remove the fake batch dimension</span></span><br><span class="line">    image = unloader(image)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> osp.exists(<span class="built_in">dir</span>):</span><br><span class="line">        os.makedirs(<span class="built_in">dir</span>)</span><br><span class="line">    image.save(<span class="string">&#x27;results_&#123;&#125;/s&#123;&#125;-c&#123;&#125;-l&#123;&#125;-e&#123;&#125;-sl&#123;:4f&#125;-cl&#123;:4f&#125;.jpg&#x27;</span></span><br><span class="line">               .<span class="built_in">format</span>(num, para[<span class="string">&#x27;style_weight&#x27;</span>], para[<span class="string">&#x27;content_weight&#x27;</span>], para[<span class="string">&#x27;lr&#x27;</span>], para[<span class="string">&#x27;epoch&#x27;</span>],</span><br><span class="line">                       para[<span class="string">&#x27;style_loss&#x27;</span>], para[<span class="string">&#x27;content_loss&#x27;</span>]))</span><br></pre></td></tr></table></figure><h3 id="numpy与Tensor"><a href="#numpy与Tensor" class="headerlink" title="numpy与Tensor"></a>numpy与Tensor</h3><blockquote><p>numpy格式是使用cv2，也就是python-opencv库读取出来的图片格式，需要注意的是用python-opencv读取出来的图片和使用PIL读取出来的图片数据略微不同，经测试<br>python-opencv读取出来的图片在训练时的效果比使用PIL读取出来的略差一些(详细过程之后发布)。</p></blockquote><h4 id="numpy转化为tensor"><a href="#numpy转化为tensor" class="headerlink" title="numpy转化为tensor"></a>numpy转化为tensor</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">toTensor</span>(<span class="params">img</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(img) == np.ndarray,<span class="string">&#x27;the img type is &#123;&#125;, but ndarry expected&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(img))</span><br><span class="line">    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">    img = torch.from_numpy(img.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">return</span> img.<span class="built_in">float</span>().div(<span class="number">255</span>).unsqueeze(<span class="number">0</span>)  <span class="comment"># 255也可以改为256</span></span><br></pre></td></tr></table></figure><h4 id="tensor转化为numpy"><a href="#tensor转化为numpy" class="headerlink" title="tensor转化为numpy"></a>tensor转化为numpy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tensor_to_np</span>(<span class="params">tensor</span>):</span><br><span class="line">    img = tensor.mul(<span class="number">255</span>).byte()</span><br><span class="line">    img = img.cpu().numpy().squeeze(<span class="number">0</span>).transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure><h4 id="展示numpy格式图片"><a href="#展示numpy格式图片" class="headerlink" title="展示numpy格式图片"></a>展示numpy格式图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_from_cv</span>(<span class="params">img, title=<span class="literal">None</span></span>):</span><br><span class="line">    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    <span class="keyword">if</span> title <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        plt.title(title)</span><br><span class="line">    plt.pause(<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><h4 id="展示tensor格式图片"><a href="#展示tensor格式图片" class="headerlink" title="展示tensor格式图片"></a>展示tensor格式图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_from_tensor</span>(<span class="params">tensor, title=<span class="literal">None</span></span>):</span><br><span class="line">    img = tensor.clone()</span><br><span class="line">    img = tensor_to_np(img)</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    <span class="keyword">if</span> title <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        plt.title(title)</span><br><span class="line">    plt.pause(<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> torch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv的常用方法</title>
      <link href="/2022/07/22/opencv/"/>
      <url>/2022/07/22/opencv/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><p>cv2.circle()方法用于在任何图像上绘制圆。</p><p>用法： cv2.circle(image, center_coordinates, radius, color, thickness)<br>参数：<br>image:它是要在其上绘制圆的图像。<br>center_coordinates：它是圆的中心坐标。坐标表示为两个值的元组，即(X坐标值，Y坐标值)。<br>radius:它是圆的半径。<br>color:它是要绘制的圆的边界线的颜色。对于BGR，我们通过一个元组。例如：(255，0，0)为蓝色。<br>thickness:它是圆边界线的粗细像素。厚度-1像素将以指定的颜色填充矩形形状。</p><p>返回值：它返回一个图像。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ros1的安装</title>
      <link href="/2022/07/13/ros/"/>
      <url>/2022/07/13/ros/</url>
      
        <content type="html"><![CDATA[<h2 id="1-配置ubuntu的软件和更新"><a href="#1-配置ubuntu的软件和更新" class="headerlink" title="1.配置ubuntu的软件和更新"></a>1.配置ubuntu的软件和更新</h2><p>配置ubuntu的软件和更新，允许安装不经认证的软件。<br>首先打开“软件和更新”对话框，具体可以在 Ubuntu 搜索按钮中搜索。<br>打开后按照下图进行配置（确保勾选了”restricted”， “universe，” 和 “multiverse.”）<br><br><img src="https://note.ofbin.cn/api/file/getImage?fileId=62bc1f52802926313b00008f" alt="title"></p><h2 id="2-更换Ubuntu系统源"><a href="#2-更换Ubuntu系统源" class="headerlink" title="2.更换Ubuntu系统源"></a>2.更换Ubuntu系统源</h2><p><img src="https://note.ofbin.cn/api/file/getImage?fileId=62bc1fc4802926313b000090" alt="title"></p><blockquote><p>可根据实际情况选择距离你最近的源</p></blockquote><h2 id="3-配置ROS源"><a href="#3-配置ROS源" class="headerlink" title="3.配置ROS源"></a>3.配置ROS源</h2><ul><li>USTC源<br><br><code>sudo sh -c &#39;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;</code><br><br>如执行有问题，则：<br><br><code>sudo sh -c &#39;echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;</code><br><br>然后再输入如下命令，信任 ROS 的 GPG Key，并更新索引<br><br><code>sudo apt install curl gnupg2</code><br><code>sudo apt-key adv --keyserver &#39;hkp://keyserver.ubuntu.com:80&#39; --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</code><br><code>sudo apt update</code><blockquote><p>若无法连接到密钥服务器，可以尝试替换上面命令中的 hkp://keyserver.ubuntu.com:80 为 hkp://pgp.mit.edu:80 。<br>你也可以使用curl命令替换apt-key命令，这在使用代理服务器的情况下比较有用：</p></blockquote><h2 id="4-安装ROS"><a href="#4-安装ROS" class="headerlink" title="4.安装ROS"></a>4.安装ROS</h2>所需类型的 ROS:ROS 多个类型:Desktop-Full、Desktop、ROS-Base。这里介绍较为常用的Desktop-Full(官方推荐)安装: ROS, rqt, rviz, robot-generic libraries, 2D/3D simulators, navigation and 2D/3D perception<br><br><code>sudo apt install ros-noetic-desktop-full</code><br><br>安装前记得执行<br><br><code>sudo apt update</code> <br><br>按需选用full或者是base，base没有图形化界面，适合安装在机器人上；<br>按照Ubuntu版本选择ROS版本，kinetic版本适合于Ubuntu 16.04，其他Ubuntu版本各有其相应的ROS版本，不建议混用。<br><br>安装完成后，可以用下面的命令来查看可使用的包<br>参考ROS官方安装<a href="http://wiki.ros.org/cn/noetic/Installation/Ubuntu">在Ubuntu上安装ROS Noetic</a><h2 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a>5.配置环境变量</h2>配置环境变量，方便在任意 终端中使用 ROS。<br><br><code>echo &quot;source /opt/ros/noetic/setup.bash&quot; &gt;&gt; ~/.bashrc</code> <br><br><code>source ~/.bashrc</code><blockquote><p>如果需要卸载ROS可以调用如下命令:<br><code>sudo apt remove ros-noetic-*</code></p></blockquote><h2 id="6-安装构建依赖"><a href="#6-安装构建依赖" class="headerlink" title="6.安装构建依赖"></a>6.安装构建依赖</h2>在noetic 最初发布时，和其他历史版本稍有差异的是:没有安装构建依赖这一步骤。随着 noetic 不断完善，官方补齐了这一操作。<br><br>首先安装构建依赖的相关工具<br><br><code>sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential</code><br><br>ROS中使用许多工具前，要求需要初始化rosdep(可以安装系统依赖) – 上一步实现已经安装过了。<br><br><code>sudo apt install python3-rosdep</code><br><br>初始化rosdep<br><br><code>sudo rosdep init</code><br><code>rosdep update</code><br>如果一切顺利的话，rosdep 初始化与更新的打印结果如下:</li></ul><p><img src="https://note.ofbin.cn/api/file/getImage?fileId=62bc55dd802926313b00009c" alt="图片alt" title="图片title"></p><blockquote><p>但是，在 rosdep 初始化时，多半会抛出异常。</p></blockquote><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>1.先打开资源备份路径:<a href="https://gitee.com/zhao-xuzuo/rosdistro%EF%BC%8C">https://gitee.com/zhao-xuzuo/rosdistro，</a><br>打开 rosdistro/rosdep/sources.list.d/20-default.list文件留作备用(主要是复用URL的部分内容:gitee.com/zhao-xuzuo/rosdistro/raw/master)。<br>2.进入”/usr/lib/python3/dist-packages/“ 查找rosdep中和raw.githubusercontent.com相关的内容，调用命令:<br><code>find . -type f | xargs grep &quot;raw.githubusercontent&quot;</code><br>3.修改相关文件，主要有: ./rosdistro/<strong>init</strong>.py、./rosdep2/gbpdistro_support.py、./rosdep2/sources_list.py 、./rosdep2/rep3.py。<br>可以使用sudo vim命令修改文件:<br>文件中涉及的 URL 内容，如果是:raw.githubusercontent.com/ros/rosdistro/master都替换成步骤1中准备的gitee.com/zhao-xuzuo/rosdistro/raw/master即可。<br>修改完毕，再重新执行命令:<br><br><code>sudo rosdep init</code><br><br><code>rosdep update</code></p><blockquote><p>更新成功打印信息：<br><br>Skip end-of-life distro “ardent”<br>Skip end-of-life distro “bouncy”<br>Skip end-of-life distro “crystal”<br>Add distro “dashing”<br>Skip end-of-life distro “eloquent”<br>Add distro “foxy”<br>Skip end-of-life distro “groovy”<br>Skip end-of-life distro “hydro”<br>Skip end-of-life distro “indigo”<br>Skip end-of-life distro “jade”<br>Add distro “kinetic”<br>Skip end-of-life distro “lunar”<br>Add distro “melodic”<br>Add distro “noetic”<br>Add distro “rolling”<br>updated cache in /root/.ros/rosdep/sources.cache</p></blockquote><p>sudo sh -c ‘. /etc/lsb-release &amp;&amp; echo “deb <a href="http://mirrors.ustc.edu.cn/ros/ubuntu/">http://mirrors.ustc.edu.cn/ros/ubuntu/</a> <code>lsb_release -cs</code> main” &gt; /etc/apt/sources.list.d/ros-latest.list’</p><p>/root/yolov5-6.0/train.py –data ../map_data/data.yaml –cfg models/yolov5n.yaml –batch-size 1 –epochs 100</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> ros1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>destroyAllWindows()函数</title>
      <link href="/2022/06/21/destroyAllWindows()%E5%87%BD%E6%95%B0/"/>
      <url>/2022/06/21/destroyAllWindows()%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="官方文档："><a href="#官方文档：" class="headerlink" title="官方文档："></a>官方文档：</h2><p>您可以调用destroyWindow（）或destroyAllWindows（）来关闭窗口并取消分配任何相关的内存使用。对于一个简单的程序，实际上不必调用这些函数，因为退出时操作系统会自动关闭应用程序的所有资源和窗口</p><blockquote><p>如果之前没有释放掉内存的操作的话destroyallWIndows会释放掉被那个变量占用的内存</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux软件源</title>
      <link href="/2022/06/04/Linux%E8%BD%AF%E4%BB%B6%E6%BA%90/"/>
      <url>/2022/06/04/Linux%E8%BD%AF%E4%BB%B6%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Ununtu"><a href="#Ununtu" class="headerlink" title="Ununtu"></a>Ununtu</h2><p><code>https://mirrors.ustc.edu.cn/help/ubuntu.html</code> </p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下opencv的安装路径</title>
      <link href="/2022/05/04/opcv%E7%9A%84%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84/"/>
      <url>/2022/05/04/opcv%E7%9A%84%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h2 id="查看linux下的opencv安装库："><a href="#查看linux下的opencv安装库：" class="headerlink" title="查看linux下的opencv安装库："></a>查看linux下的opencv安装库：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config opencv --libs</span><br></pre></td></tr></table></figure><h2 id="查看linux下的opencv安装版本："><a href="#查看linux下的opencv安装版本：" class="headerlink" title="查看linux下的opencv安装版本："></a>查看linux下的opencv安装版本：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-config opencv --modversion </span><br></pre></td></tr></table></figure><h2 id="查看linux下的opencv安装路径："><a href="#查看linux下的opencv安装路径：" class="headerlink" title="查看linux下的opencv安装路径："></a>查看linux下的opencv安装路径：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -iname <span class="string">&quot;*opencv*&quot;</span></span><br></pre></td></tr></table></figure><h2 id="在全盘上不区分大小写，搜索带有关键字opencv的所有文件及文件夹都会输出到终端，如果输出太长建议输出到txt文件里查看，如下："><a href="#在全盘上不区分大小写，搜索带有关键字opencv的所有文件及文件夹都会输出到终端，如果输出太长建议输出到txt文件里查看，如下：" class="headerlink" title="在全盘上不区分大小写，搜索带有关键字opencv的所有文件及文件夹都会输出到终端，如果输出太长建议输出到txt文件里查看，如下："></a>在全盘上不区分大小写，搜索带有关键字opencv的所有文件及文件夹都会输出到终端，如果输出太长建议输出到txt文件里查看，如下：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -iname <span class="string">&quot;*opencv*&quot;</span> &gt; /home/ubuntu/Desktop/opencv_find.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
